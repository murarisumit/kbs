<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software-Design-Principle on knowledge base</title><link>https://kbs.murarisumit.in/tags/software-design-principle/</link><description>Recent content in Software-Design-Principle on knowledge base</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 02 Nov 2021 22:00:04 +0530</lastBuildDate><atom:link href="https://kbs.murarisumit.in/tags/software-design-principle/index.xml" rel="self" type="application/rss+xml"/><item><title>Solid Principle in Simple Way</title><link>https://kbs.murarisumit.in/5df1af1a7c595eb1c55b78bc2086c772/</link><pubDate>Tue, 02 Nov 2021 22:00:04 +0530</pubDate><guid>https://kbs.murarisumit.in/5df1af1a7c595eb1c55b78bc2086c772/</guid><description>&lt;p>Summary:&lt;/p>
&lt;h4 id="single-responsibility-principle-">Single Responsibility principle :&lt;/h4>
&lt;p>Don’t surprise the people who read your code.&lt;/p>
&lt;p>There should never be more than one reason for a class to change. You should be able to use and add to a module without rewriting it.&lt;/p>
&lt;h4 id="open-close-principle">Open-Close principle&lt;/h4>
&lt;p>Don’t surprise the people who use your code. Your code should be close for modification and open for extension&lt;/p>
&lt;h4 id="liskov-substitution-principle">Liskov substitution principle&lt;/h4>
&lt;p>Don’t overwhelm the people who read your code.
If S is a subtype of T, then objects of type T may be replaced with objects of type S without altering any of the desirable properties of the program. &lt;em>You should be able to substitute one thing for another if those things are declared to behave the same way&lt;/em>.&lt;/p>
&lt;h4 id="interface-segregation-principle-use-sane-boundaries-for-your-code">Interface segregation principle: Use sane boundaries for your code.&lt;/h4>
&lt;p>Many client-specific interfaces are better than one general-purpose interface. Don’t show your clients more than they need to see&lt;/p>
&lt;h4 id="dependency-inversion-principle-use-the-right-level-of-couplingkeep-things-together-that-belong-together-and-keep-them-apart-if-they-belong-apart">Dependency inversion principle: Use the right level of coupling—keep things together that belong together, and keep them apart if they belong apart.&lt;/h4>
&lt;p>Depend upon abstractions, not concretions.&lt;/p>
&lt;hr></description></item></channel></rss>