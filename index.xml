<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tils and bookmarks</title>
    <link>http://www.yinyangi.in/kbs/</link>
    <description>Recent content on Tils and bookmarks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 May 2020 19:18:04 +0530</lastBuildDate>
    
	<atom:link href="http://www.yinyangi.in/kbs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>KISS</title>
      <link>http://www.yinyangi.in/kbs/til/kiss/</link>
      <pubDate>Thu, 21 May 2020 19:18:04 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/til/kiss/</guid>
      <description>KISS is an acronym for &amp;ldquo;Keep it simple stupid&amp;rdquo; (notice no comma).
Stupid does not refer to the user. To quote Wikipedia:
 The principle is best exemplified by the story of Johnson handing a team of design engineers a handful of tools, with the challenge that the jet aircraft they were designing must be repairable by
an average mechanic in the field under combat conditions with only these tools.</description>
    </item>
    
    <item>
      <title>Sell Yourself, Sell Your Work</title>
      <link>http://www.yinyangi.in/kbs/bookmark/sell-yourself-sell-your-work/</link>
      <pubDate>Thu, 21 May 2020 08:39:21 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/bookmark/sell-yourself-sell-your-work/</guid>
      <description>Few notes Doing technically brilliant work may be enough for your personal gratification, but you should never think it&amp;rsquo;s enough. If you lock yourself in a room and do the most marvellous work but don&amp;rsquo;t tell anyone, then no one will know, no one will benefit, and the work will be lost. You may as well not have bothered. For the world to benefit from your work, and therefore for you to benefit fully from your work, you have to make it known.</description>
    </item>
    
    <item>
      <title>EKS Best Practices</title>
      <link>http://www.yinyangi.in/kbs/bookmark/eks-best-practices/</link>
      <pubDate>Wed, 20 May 2020 22:16:17 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/bookmark/eks-best-practices/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Promql cheatsheet</title>
      <link>http://www.yinyangi.in/kbs/bookmark/promql/</link>
      <pubDate>Wed, 20 May 2020 22:04:04 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/bookmark/promql/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hugo the Scope the Context and the Dot</title>
      <link>http://www.yinyangi.in/kbs/bookmark/hugo-the-scope-the-context-and-the-dot/</link>
      <pubDate>Sun, 17 May 2020 18:54:04 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/bookmark/hugo-the-scope-the-context-and-the-dot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hugo Tags List</title>
      <link>http://www.yinyangi.in/kbs/snippet/hugo-tags-list/</link>
      <pubDate>Sun, 17 May 2020 18:09:46 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/snippet/hugo-tags-list/</guid>
      <description>A simple snippet i found to fetch all tags, and still to read it up
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  {{ if ne .Site.Params.TagsInHome 0 }} {{ $randTags := (slice)}} {{ range $name, $taxonomy := .Site.Taxonomies.tags }} {{ $randTags = $randTags | append $name }} {{ end }} {{ $randTags = sort (first .</description>
    </item>
    
    <item>
      <title>Change Orientation of an Image</title>
      <link>http://www.yinyangi.in/kbs/til/change-orientation-of-an-image/</link>
      <pubDate>Sun, 17 May 2020 17:30:23 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/til/change-orientation-of-an-image/</guid>
      <description>A single-line CSS transform is all it takes to change the orientation of an image (or any DOM element, really).
For instance, if I have an image that is on its side, I can use the following rotate transform to orient it correctly.
1 2 3  img { transform: rotate(90deg); }   Testing you babay
1 2  import os os.path.join()    Go hello world
1 2 3 4 5 6 7  import ( &amp;#34;fmt&amp;#34; ) func main() { fmt.</description>
    </item>
    
    <item>
      <title>Hello bookmarks</title>
      <link>http://www.yinyangi.in/kbs/bookmark/hello-bookmark/</link>
      <pubDate>Sun, 17 May 2020 14:54:46 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/bookmark/hello-bookmark/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Home til</title>
      <link>http://www.yinyangi.in/kbs/til/home-til/</link>
      <pubDate>Sat, 16 May 2020 21:19:26 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/til/home-til/</guid>
      <description>A single-line CSS transform is all it takes to change the orientation of an image (or any DOM element, really).
For instance, if I have an image that is on its side, I can use the following rotate transform to orient it correctly.
1 2 3  img { transform: rotate(90deg); }   It takes an angle which can be specified in degrees. Here I use 90deg. If I was going for a different effect, I could do something like 45deg.</description>
    </item>
    
    <item>
      <title>Dark Mode Website Css</title>
      <link>http://www.yinyangi.in/kbs/til/dark-mode-website-css/</link>
      <pubDate>Sat, 16 May 2020 16:14:17 +0530</pubDate>
      
      <guid>http://www.yinyangi.in/kbs/til/dark-mode-website-css/</guid>
      <description>Test me more about it, and it&amp;rsquo;s working for me</description>
    </item>
    
  </channel>
</rss>